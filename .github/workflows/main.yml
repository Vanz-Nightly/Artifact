name: Build & Sign Release APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    env:
      # These may be provided as repo secrets; if not present they will be set to defaults in the script.
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      # If you already have a base64 keystore saved as secret you can set KEYSTORE_BASE64 in repo secrets
      KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Unzip BoomingMusic-1.1.0-beta.9.zip
        run: |
          mkdir -p src
          unzip -q BoomingMusic-1.1.0-beta.9.zip -d src || true
          echo "Top-level of src:"
          ls -la src || true

      - name: List files for debugging (after unzip)
        run: ls -R src || true

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/build.gradle*', '**/build.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Release APK (detect project, create/sign keystore if needed)
        run: |
          set -euo pipefail

          # locate project directory
          PROJECT_DIR=""
          PROJECT_DIR=$(find src -maxdepth 6 -type f -name 'settings.gradle*' -printf '%h\n' | head -n1 || true)
          if [ -z "$PROJECT_DIR" ]; then
            PROJECT_DIR=$(find src -maxdepth 6 -type f \( -name 'build.gradle' -o -name 'build.gradle.kts' \) -printf '%h\n' | head -n1 || true)
          fi

          if [ -z "$PROJECT_DIR" ]; then
            echo "ERROR: Could not find Gradle project (settings.gradle or build.gradle(.kts)) under src"
            ls -R src
            exit 1
          fi

          echo "Found Gradle project: $PROJECT_DIR"
          cd "$PROJECT_DIR"
          echo "Working dir: $(pwd)"

          # Set defaults if secrets not provided
          KEYSTORE_PASSWORD="${KEYSTORE_PASSWORD:-changeme123}"
          KEY_PASSWORD="${KEY_PASSWORD:-changeme123}"
          KEY_ALIAS="${KEY_ALIAS:-boomingkey}"

          # If a base64 keystore secret exists, decode it to release-keystore.jks
          if [ -n "${KEYSTORE_BASE64:-}" ]; then
            echo "Decoding KEYSTORE_BASE64 secret to release-keystore.jks"
            echo "${KEYSTORE_BASE64}" | base64 --decode > release-keystore.jks
          fi

          # If keystore doesn't exist (no secret or file), create one on the fly
          if [ ! -f release-keystore.jks ]; then
            echo "No keystore found: creating release-keystore.jks with alias $KEY_ALIAS"
            # Non-interactive keytool command to create a keystore
            keytool -genkeypair \
              -alias "$KEY_ALIAS" \
              -keyalg RSA -keysize 2048 -validity 10000 \
              -keystore release-keystore.jks \
              -storepass "$KEYSTORE_PASSWORD" \
              -keypass "$KEY_PASSWORD" \
              -dname "CN=Booming Music, OU=Dev, O=Vanz, L=City, ST=State, C=US"
            echo "Keystore created."
          else
            echo "Keystore file present: release-keystore.jks"
          fi

          # Write gradle.properties so signingConfig can pick it up
          echo "KEYSTORE_FILE=$(pwd)/release-keystore.jks" >> gradle.properties
          echo "KEYSTORE_PASSWORD=$KEYSTORE_PASSWORD" >> gradle.properties
          echo "KEY_ALIAS=$KEY_ALIAS" >> gradle.properties
          echo "KEY_PASSWORD=$KEY_PASSWORD" >> gradle.properties

          ls -la release-keystore.jks || true
          # ensure wrapper is executable and run release build
          if [ -f ./gradlew ]; then
            chmod +x ./gradlew
            ./gradlew clean assembleRelease --no-daemon --stacktrace --warning-mode all
          else
            gradle clean assembleRelease --no-daemon --stacktrace --warning-mode all
          fi
        shell: bash

      - name: Find release APKs (debug info)
        run: |
          echo "Looking for release apks"
          find . -type f -name "*release*.apk" -print || true

      - name: Upload signed release APK(s)
        uses: actions/upload-artifact@v4
        with:
          name: BoomingMusic-Release-APK
          path: |
            **/build/outputs/apk/release/*.apk

      - name: Upload generated keystore (download and keep safe!)
        uses: actions/upload-artifact@v4
        with:
          name: generated-release-keystore
          path: release-keystore.jks

      - name: Upload keystore base64 text (use to add a secret later)
        run: |
          base64 release-keystore.jks > release-keystore.jks.base64
        continue-on-error: false
      - name: Upload base64 keystore text
        uses: actions/upload-artifact@v4
        with:
          name: release-keystore-base64
          path: release-keystore.jks.base64
