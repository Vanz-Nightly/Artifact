name: Booming Music - Build non-debug APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Unzip BoomingMusic zip
        run: |
          mkdir -p src
          unzip -q BoomingMusic-1.1.0-beta.9.zip -d src || true
          echo "Top-level of src:"
          ls -la src || true

      - name: Inspect src (debug)
        run: ls -R src || true

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle directories (optional - speeds up builds)
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/build.gradle*', '**/build.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build release (auto-detect project dir, write build.log to workspace)
        run: |
          set -euo pipefail
          BUILD_LOG="$GITHUB_WORKSPACE/build.log"

          # try to locate project root (prefer settings.gradle(.kts))
          PROJECT_DIR=$(find src -maxdepth 4 -type f -name 'settings.gradle*' -printf '%h\n' | head -n1 || true)
          if [ -z "$PROJECT_DIR" ]; then
            PROJECT_DIR=$(find src -maxdepth 4 -type f \( -name 'build.gradle' -o -name 'build.gradle.kts' \) -printf '%h\n' | head -n1 || true)
          fi

          if [ -z "$PROJECT_DIR" ]; then
            echo "ERROR: Could not find settings.gradle or build.gradle(.kts) under src. Listing src for debug:" | tee "$BUILD_LOG"
            ls -R src | tee -a "$BUILD_LOG"
            exit 1
          fi

          echo "Found Gradle project directory: $PROJECT_DIR"
          cd "$PROJECT_DIR"
          echo "Working directory: $(pwd)"
          if [ -f ./gradlew ]; then
            chmod +x ./gradlew
            echo "Using project Gradle wrapper (./gradlew)"
            ./gradlew clean assembleRelease --no-daemon --stacktrace --warning-mode all > "$BUILD_LOG" 2>&1 || true
            BUILD_EXIT=$?
          else
            echo "No gradlew wrapper found; falling back to system gradle" > "$BUILD_LOG"
            gradle clean assembleRelease --no-daemon --stacktrace --warning-mode all > "$BUILD_LOG" 2>&1 || true
            BUILD_EXIT=$?
          fi

          echo "Gradle exit code: $BUILD_EXIT"
          echo "----- tail of build log -----"
          tail -n 200 "$BUILD_LOG" || true
          # leave build.log at workspace root for upload
        shell: bash

      - name: Show build.log head (for quick preview)
        if: always()
        run: |
          echo "---- build.log head ----"
          head -n 400 build.log || true
          echo "---- end head ----"

      - name: Upload build.log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: build.log

      - name: Find and upload a single release APK (pick largest)
        if: always()
        run: |
          set -euo pipefail
          # Find release APKs under src (where the zip unpacks)
          mapfile -t APKS < <(find src -type f -path "*/build/outputs/apk/*/release/*.apk" -print || true)

          if [ "${#APKS[@]}" -eq 0 ]; then
            echo "No release APKs found under src/**/build/outputs/apk/*/release/"
            exit 0
          fi

          # pick the largest APK (heuristic for single/universal)
          LARGEST="${APKS[0]}"
          for a in "${APKS[@]}"; do
            if [ "$(stat -c%s "$a")" -gt "$(stat -c%s "$LARGEST")" ]; then
              LARGEST="$a"
            fi
          done

          echo "Selected APK for upload: $LARGEST (size: $(stat -c%s "$LARGEST"))"
          mkdir -p "$GITHUB_WORKSPACE/dist"
          cp "$LARGEST" "$GITHUB_WORKSPACE/dist/BoomingMusic-release.apk"
          echo "Copied to $GITHUB_WORKSPACE/dist/BoomingMusic-release.apk"
        shell: bash

      - name: Upload single release APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: BoomingMusic-Release-APK
          path: dist/BoomingMusic-release.apk
