name: Build APK from BoomingMusic Zip

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Unzip BoomingMusic-1.1.0-beta.9.zip
      run: |
        mkdir -p src
        unzip -q BoomingMusic-1.1.0-beta.9.zip -d src || true
        echo "Contents of src (top level):"
        ls -la src || true

    - name: List files for debugging (after unzip)
      run: ls -R src || true

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Cache Gradle directories (optional - speeds up builds)
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/build.gradle*', '**/build.gradle.kts') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build APK (auto-detect project dir, prefer wrapper)
      run: |
        set -euo pipefail

        # Try to locate the project root (settings.gradle(.kts) preferred, fallback to build.gradle(.kts))
        PROJECT_DIR=""
        PROJECT_DIR=$(find src -maxdepth 4 -type f -name 'settings.gradle*' -printf '%h\n' | head -n1 || true)
        if [ -z "$PROJECT_DIR" ]; then
          PROJECT_DIR=$(find src -maxdepth 4 -type f \( -name 'build.gradle' -o -name 'build.gradle.kts' \) -printf '%h\n' | head -n1 || true)
        fi

        if [ -z "$PROJECT_DIR" ]; then
          echo "ERROR: Could not find settings.gradle or build.gradle(.kts) under src. Listing src for debug:"
          ls -R src
          exit 1
        fi

        echo "Found Gradle project directory: $PROJECT_DIR"
        cd "$PROJECT_DIR"
        echo "Working directory: $(pwd)"
        # make wrapper executable if present
        if [ -f ./gradlew ]; then
          echo "Using project Gradle wrapper (./gradlew)"
          chmod +x ./gradlew
          ./gradlew assembleDebug --no-daemon --stacktrace --warning-mode all
        else
          echo "No gradlew wrapper found; falling back to system gradle (may not match project gradle version)"
          gradle assembleDebug --no-daemon --stacktrace --warning-mode all
        fi

    - name: List APKs for debugging (show any APKs produced)
      run: |
        echo "Searching for .apk files under src:"
        find src -type f -name "*.apk" -print || true
        echo "Listing build output directories for inspection:"
        find src -type d -path "*/build/outputs/*" -maxdepth 6 -print || true

    - name: Upload any APKs produced
      uses: actions/upload-artifact@v4
      with:
        name: BoomingMusic-APK
        path: |
          src/**/build/outputs/**/*.apk
