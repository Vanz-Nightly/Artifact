name: Booming Music

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    env:
      ANDROID_SDK_ROOT: /usr/local/android-sdk
      KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Unzip BoomingMusic zip
        run: |
          mkdir -p src
          unzip -q BoomingMusic-1.1.0-beta.9.zip -d src || true
          echo "Top-level of src:"
          ls -la src || true

      - name: Inspect src (debug)
        run: ls -R src || true

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install Android commandline tools + SDK (linux)
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y wget unzip
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          cd $ANDROID_SDK_ROOT/cmdline-tools
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip -q cmdline-tools.zip
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools/latest
          mv $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools/* $ANDROID_SDK_ROOT/cmdline-tools/latest/ || true
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH"
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || true
          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.2"
          echo "SDK installed (top-level):"
          ls -la $ANDROID_SDK_ROOT || true

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/build.gradle*', '**/build.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build release (detect project, create/sign keystore if needed) and capture log
        run: |
          set -euo pipefail

          PROJECT_DIR=$(find src -maxdepth 6 -type f -name 'settings.gradle*' -printf '%h\n' | head -n1 || true)
          if [ -z "$PROJECT_DIR" ]; then
            PROJECT_DIR=$(find src -maxdepth 6 -type f \( -name 'build.gradle' -o -name 'build.gradle.kts' \) -printf '%h\n' | head -n1 || true)
          fi

          if [ -z "$PROJECT_DIR" ]; then
            echo "ERROR: Could not find Gradle project under src (no settings.gradle or build.gradle(.kts))"
            ls -R src
            echo "no-project-found" > build.log
            exit 1
          fi

          echo "Found Gradle project: $PROJECT_DIR"
          cd "$PROJECT_DIR"
          echo "Working dir: $(pwd)"
          ls -la || true
          ls -la app || true

          KEYSTORE_PASSWORD="${KEYSTORE_PASSWORD:-changeme123}"
          KEY_PASSWORD="${KEY_PASSWORD:-changeme123}"
          KEY_ALIAS="${KEY_ALIAS:-boomingkey}"

          if [ -n "${KEYSTORE_BASE64:-}" ]; then
            echo "Decoding KEYSTORE_BASE64 secret to release-keystore.jks"
            echo "${KEYSTORE_BASE64}" | base64 --decode > release-keystore.jks || true
          fi

          if [ ! -f release-keystore.jks ]; then
            echo "No keystore found: creating release-keystore.jks"
            keytool -genkeypair \
              -alias "$KEY_ALIAS" \
              -keyalg RSA -keysize 2048 -validity 10000 \
              -keystore release-keystore.jks \
              -storepass "$KEYSTORE_PASSWORD" \
              -keypass "$KEY_PASSWORD" \
              -dname "CN=Booming Music, OU=Dev, O=Vanz, L=City, ST=State, C=US" || true
            echo "Keystore created (or creation attempted)."
          else
            echo "Keystore present at $(pwd)/release-keystore.jks"
          fi

          # Write gradle.properties (local workspace only)
          echo "KEYSTORE_FILE=$(pwd)/release-keystore.jks" >> gradle.properties
          echo "KEYSTORE_PASSWORD=$KEYSTORE_PASSWORD" >> gradle.properties
          echo "KEY_ALIAS=$KEY_ALIAS" >> gradle.properties
          echo "KEY_PASSWORD=$KEY_PASSWORD" >> gradle.properties

          if [ -f ./gradlew ]; then
            chmod +x ./gradlew
            echo "Running: ./gradlew clean assembleRelease --no-daemon"
            ./gradlew clean assembleRelease --no-daemon --stacktrace --warning-mode all > build.log 2>&1 || true
            BUILD_EXIT=$?
          else
            echo "No gradlew found; attempting system gradle (may fail)."
            gradle clean assembleRelease --no-daemon --stacktrace --warning-mode all > build.log 2>&1 || true
            BUILD_EXIT=$?
          fi

          echo "Gradle exit code: $BUILD_EXIT"
          echo "----- tail of build.log -----"
          tail -n 200 build.log || true

          if [ "$BUILD_EXIT" -ne 0 ]; then
            echo "Build failed (exit code $BUILD_EXIT)."
            exit $BUILD_EXIT
          fi
        shell: bash

      - name: Show build.log head (for quick preview)
        if: always()
        run: |
          echo "---- build.log head ----"
          head -n 400 build.log || true
          echo "---- end head ----"

      - name: Upload build.log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: build.log

      - name: Upload generated keystore (if present)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: generated-release-keystore
          path: release-keystore.jks

      - name: Upload keystore base64 (if present)
        if: always()
        run: |
          if [ -f release-keystore.jks ]; then
            base64 release-keystore.jks > release-keystore.jks.base64 || true
            ls -la release-keystore.jks.base64 || true
          fi
        shell: bash

      - name: Upload base64 keystore
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-keystore-base64
          path: release-keystore.jks.base64

      - name: Produce a single signed APK artifact (zipalign + apksigner)
        if: always()
        run: |
          set -euo pipefail

          # find installed build-tools dir (pick highest version installed)
          if [ -d "$ANDROID_SDK_ROOT/build-tools" ]; then
            BUILD_TOOLS_DIR=$(ls -1d "$ANDROID_SDK_ROOT"/build-tools/* | sort -V | tail -n1)
          else
            echo "No build-tools found under $ANDROID_SDK_ROOT/build-tools"
            exit 1
          fi
          ZIPALIGN="$BUILD_TOOLS_DIR/zipalign"
          APKSIGNER="$BUILD_TOOLS_DIR/apksigner"
          echo "Using build-tools: $BUILD_TOOLS_DIR"

          # find release apks
          mapfile -t APKS < <(find src -type f -name "*release*.apk" -print || true)
          if [ "${#APKS[@]}" -eq 0 ]; then
            echo "No release APKs found under src/**/build/outputs/apk/"
            exit 1
          fi

          # pick largest APK (best guess for "universal" / main APK)
          LARGEST_APK="${APKS[0]}"
          for a in "${APKS[@]}"; do
            if [ "$(stat -c%s "$a")" -gt "$(stat -c%s "$LARGEST_APK")" ]; then
              LARGEST_APK="$a"
            fi
          done
          echo "Selected APK: $LARGEST_APK (size: $(stat -c%s "$LARGEST_APK"))"

          mkdir -p dist

          # locate keystore (search workspace)
          KEYSTORE_PATH=$(find . -maxdepth 6 -type f -name "release-keystore.jks" -print -quit || true)
          if [ -z "$KEYSTORE_PATH" ]; then
            echo "No release-keystore.jks found to sign APK. Continuing will fail signature step."
          else
            echo "Found keystore at: $KEYSTORE_PATH"
          fi

          # determine if APK is already signed
          if [ -x "$APKSIGNER" ]; then
            if "$APKSIGNER" verify "$LARGEST_APK" >/dev/null 2>&1; then
              echo "APK appears already signed; copying to dist/"
              cp "$LARGEST_APK" dist/BoomingMusic-release-signed.apk
            else
              # align then sign
              ALIGNED=dist/aligned.apk
              if [ -x "$ZIPALIGN" ]; then
                echo "Running zipalign..."
                "$ZIPALIGN" -v 4 "$LARGEST_APK" "$ALIGNED" || cp "$LARGEST_APK" "$ALIGNED"
              else
                echo "zipalign not found, copying original to aligned.apk"
                cp "$LARGEST_APK" "$ALIGNED"
              fi

              if [ -f "$KEYSTORE_PATH" ]; then
                echo "Signing APK with apksigner..."
                "$APKSIGNER" sign --ks "$KEYSTORE_PATH" \
                  --ks-key-alias "${KEY_ALIAS:-boomingkey}" \
                  --ks-pass pass:"${KEYSTORE_PASSWORD:-changeme123}" \
                  --key-pass pass:"${KEY_PASSWORD:-changeme123}" \
                  --out dist/BoomingMusic-release-signed.apk "$ALIGNED"
              else
                echo "No keystore available; copying aligned APK as artifact (unsigned)."
                cp "$ALIGNED" dist/BoomingMusic-release-signed.apk
              fi
            fi
          else
            echo "apksigner not found; copying selected APK to dist (unsigned)."
            cp "$LARGEST_APK" dist/BoomingMusic-release-signed.apk
          fi

          echo "Final artifact:"
          ls -l dist || true
        shell: bash

      - name: Upload single signed APK artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: BoomingMusic-Release-APK
          path: dist/BoomingMusic-release-signed.apk
